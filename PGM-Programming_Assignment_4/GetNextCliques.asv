%GETNEXTCLIQUES Find a pair of cliques ready for message passing
%   [i, j] = GETNEXTCLIQUES(P, messages) finds ready cliques in a given
%   clique tree, P, and a matrix of current messages. Returns indices i and j
%   such that clique i is ready to transmit a message to clique j.
%
%   We are doing clique tree message passing, so
%   do not return (i,j) if clique i has already passed a message to clique j.
%
%	 messages is a n x n matrix of passed messages, where messages(i,j)
% 	 represents the message going from clique i to clique j.
%   This matrix is initialized in CliqueTreeCalibrate as such:
%      MESSAGES = repmat(struct('var', [], 'card', [], 'val', []), N, N);
%
%   If more than one message is ready to be transmitted, return
%   the pair (i,j) that is numerically smallest. If you use an outer
%   for loop over i and an inner for loop over j, breaking when you find a
%   ready pair of cliques, you will get the right answer.
%
%   If no such cliques exist, returns i = j = 0.
%
%   See also CLIQUETREECALIBRATE
%
% Copyright (C) Daphne Koller, Stanford University, 2012


function [i, j] = GetNextCliques(P, messages)

% initialization
% you should set them to the correct values in your code
i = 0;
j = 0;
N = size(messages,1);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% YOUR CODE HERE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
disp(sprintf('UPSTREAM'));
disp(sprintf('-------------------------------------------------'));
t_dest = 0;
% upstream
for i=1:N
    count_edges = 0;
    count_message = 0;
    % count incomming messages to i
    for j=1:N
        if j~=i && P.edges(i,j)==1
            count_edges = count_edges + 1;
            disp(sprintf('|COUNT_EDGES|j->i:%d->%d, count_edges=%d,count_message=%d',j,i,count_edges,count_message));
        end
        if j~=i && P.edges(i,j)==1 && ~isempty(messages(j,i).var)
            count_message = count_message + 1;
            disp(sprintf('|COUNT_MESSAGE|j->i:%d->%d, count_edges=%d,count_message=%d',j,i,count_edges,count_message));
        elseif j~=i && P.edges(i,j)==1 && isempty(messages(j,i).var)
            t_dest = j;
        end
    end
    if count_message == count_edges - 1 && isempty(messages(i, t_dest).var)
        disp(sprintf('|RETURN|j->i:%d->%d, count_edges=%d,count_message=%d',t_dest,i,count_edges,count_message));
        return;
    end
end

% downstream
disp(sprintf('DOWNSTREAM'));
disp(sprintf('----------------------------------------------------------------'));
for i=N:1
    % count outgoing messages from i
    for j=1:N
        if j~=i && P.edges(i,j)==1 && isempty(messages(i,j).var)
            disp(sprintf('|RETURN|i->j:%d->%d, count_edges=%d,count_message=%d',i,j,count_edges,count_message));
            return;
        else
            disp(sprintf(''));
        end
    end
end

i=0;
j=0;
disp(sprintf('|NOVALID|j->i:%d->%d',j,i));
return;
