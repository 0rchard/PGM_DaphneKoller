%COMPUTEINITIALPOTENTIALS Sets up the cliques in the clique tree that is
%passed in as a parameter.
%
%   P = COMPUTEINITIALPOTENTIALS(C) Takes the clique tree skeleton C which is a
%   struct with three fields:
%   - nodes: cell array representing the cliques in the tree.
%   - edges: represents the adjacency matrix of the tree.
%   - factorList: represents the list of factors that were used to build
%   the tree. 
%   
%   It returns the standard form of a clique tree P that we will use through 
%   the rest of the assigment. P is struct with two fields:
%   - cliqueList: represents an array of cliques with appropriate factors 
%   from factorList assigned to each clique. Where the .val of each clique
%   is initialized to the initial potential of that clique.
%   - edges: represents the adjacency matrix of the tree. 
%
% Copyright (C) Daphne Koller, Stanford University, 2012


function P = ComputeInitialPotentials(C)

% number of cliques
N = length(C.nodes);

% initialize cluster potentials 
P.cliqueList = repmat(struct('var', [], 'card', [], 'val', []), N, 1);
P.edges = zeros(N);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% YOUR CODE HERE
%
% First, compute an assignment of factors from factorList to cliques. 
% Then use that assignment to initialize the cliques in cliqueList to 
% their initial potentials. 

% C.nodes is a list of cliques.
% So in your code, you should start with: P.cliqueList(i).var = C.nodes{i};
% Print out C to get a better understanding of its structure.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
K = length(C.factorList);
cardList = zeros(1, K);


for k=1:K
    cardList(C.factorList(k).var) = C.factorList(k).card;
end

[vars indexA] = unique([C.factorList.var], 'first');
K = length(C.factorList);
used = zeros(1, K);

for i=1:N
    P.cliqueList(i).var = C.nodes{i};
    P.cliqueList(i).card = cardList(P.cliqueList(i).var);

    factor = struct('var', [], 'card', [], 'val', []);
    for k=1:K
        if isempty(setdiff(C.factorList(k).var, P.cliqueList(i).var))
            if used(k) == 1
                continue;
            end

                factor = FactorProduct(factor, C.factorList(k));
            end
            used(k) = 1;
        end
    end
    
    if isempty(factor)
        P.cliqueList(i).val = zeros(1, prod(P.cliqueList(i).card));
    else        
        if length(factor.var) ~= length(P.cliqueList(i).var)
            disp(sprintf('smaller factor for %d',i));
            factor
            n_factor = struct('var', [], 'card', [], 'val', []);
            n_factor.var = setdiff(P.cliqueList(i).var, factor.var);
            n_factor.card = cardList(n_factor.var);
            n_factor.val = zeros(1, prod(n_factor.card));
            factor = FactorProduct(n_factor, factor);        
        end
    end 
    t_factor = ReorderFactorVariables(factor);
    P.cliqueList(i).val = t_factor.val;
    disp(sprintf('i=%d', i));
    P.cliqueList(i)
end

P.edges = C.edges;

end

